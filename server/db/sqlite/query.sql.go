// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package sqlite

import (
	"context"
)

const createProject = `-- name: CreateProject :one
;

INSERT INTO projects(
  name , owner
)  VALUES (
  ?    ,  ?   
)
RETURNING id, name, owner
`

type CreateProjectParams struct {
	Name  string
	Owner int64
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, createProject, arg.Name, arg.Owner)
	var i Project
	err := row.Scan(&i.ID, &i.Name, &i.Owner)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users(
  name , email , password
) VALUES (
  ?    ,  ?    ,   ?
)
RETURNING id, name, email, password
`

type CreateUserParams struct {
	Name     string
	Email    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Name, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, name, email, password FROM users
WHERE email = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const getUserProjects = `-- name: GetUserProjects :many
SELECT p.id ,p.name, p.owner  
FROM projects p 
WHERE p.owner = ?
`

func (q *Queries) GetUserProjects(ctx context.Context, owner int64) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, getUserProjects, owner)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(&i.ID, &i.Name, &i.Owner); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
